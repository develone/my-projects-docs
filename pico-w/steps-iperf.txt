Needed to create a file pw_ssid.h
#ifndef _SSID_H
#define _SSID_H
char WIFI_PASSWORD[] = "WIFI_PASSWORD";
#endif
The pw_ssid.h needs to be added to picow_iperf.c
In addition you need to modify the line in picow_iperf.c
 if (cyw43_arch_wifi_connect_timeout_ms(WIFI_SSID, WIFI_PASSWORD, CYW43_AUTH_WPA2_AES_PSK, 30000)) {
with your WIFI_SSID --> "WIFI_SSID"

These 2 executeables get created.

picow_iperf_server_background.elf
picow_iperf_server_poll.elf

I use the following to program the pico-w
openocd -f interface/raspberrypi-swd.cfg -f target/rp2040.cfg -c "program pico_w/iperf/picow_iperf_server_background.elf verify reset exit"
openocd -f interface/raspberrypi-swd.cfg -f target/rp2040.cfg -c "program pico_w/iperf/picow_iperf_server_poll.elf verify reset exit"

Both provide the following:

Connecting to WiFi...
Connected.

Ready, running iperf server at 192.168.1.159

I added the following to /etc/hosts
192.168.1.159   Picow27


I forked https://github.com/esnet/iperf 
./test_commands.sh Picow27
+ host=Picow27
+ ./src/iperf3 -c Picow27 -V -t 5 -T test1
test1:  iperf 3.11
test1:  test1:  Linux pi4-27 5.15.32-v7l+ #1538 SMP Thu Mar 31 19:39:41 BST 2022 armv7l
iperf3: error - unable to connect to server: Connection refused
+ ./src/iperf3 -c Picow27 -u -V -t 5
iperf 3.11
Linux pi4-27 5.15.32-v7l+ #1538 SMP Thu Mar 31 19:39:41 BST 2022 armv7l
iperf3: error - unable to connect to server: Connection refused
+ ./src/iperf3 -c Picow27 -i .3 -O 2 -t 5
iperf3: error - unable to connect to server: Connection refused
+ ./src/iperf3 -c Picow27 -i 1 -J -t 5
{
	"start":	{
		"connected":	[],
		"version":	"iperf 3.11",
		"system_info":	"Linux pi4-27 5.15.32-v7l+ #1538 SMP Thu Mar 31 19:39:41 BST 2022 armv7l"
	},
	"intervals":	[],
	"end":	{
	},
	"error":	"unable to connect to server: Connection refused"
}
+ ./src/iperf3 -c Picow27 -4 -t 5
iperf3: error - unable to connect to server: Connection refused
+ ./src/iperf3 -c Picow27 -4 -u -t 5
iperf3: error - unable to connect to server: Connection refused
+ ./src/iperf3 -c Picow27 -6 -t 5
iperf3: error - unable to connect to server: Invalid argument
+ ./src/iperf3 -c Picow27 -6 -u -t 5
iperf3: error - unable to connect to server: Invalid argument
+ ./src/iperf3 -c Picow27 -V -t 5 --fq-rate 5m
iperf 3.11
Linux pi4-27 5.15.32-v7l+ #1538 SMP Thu Mar 31 19:39:41 BST 2022 armv7l
iperf3: error - unable to connect to server: Connection refused
+ ./src/iperf3 -c Picow27 -u -V -t 5 --fq-rate 5m
iperf 3.11
Linux pi4-27 5.15.32-v7l+ #1538 SMP Thu Mar 31 19:39:41 BST 2022 armv7l
iperf3: error - unable to connect to server: Connection refused
+ ./src/iperf3 -c Picow27 --sctp -V -t 5
/home/devel/iperf/src/.libs/iperf3: unrecognized option '--sctp'
Usage: iperf3 [-s|-c host] [options]
       iperf3 [-h|--help] [-v|--version]

Server or Client:
  -p, --port      #         server port to listen on/connect to
  -f, --format   [kmgtKMGT] format to report: Kbits, Mbits, Gbits, Tbits
  -i, --interval  #         seconds between periodic throughput reports
  -I, --pidfile file        write PID file
  -F, --file name           xmit/recv the specified file
  -A, --affinity n/n,m      set CPU affinity
  -B, --bind <host>[%<dev>] bind to the interface associated with the address <host>
                            (optional <dev> equivalent to `--bind-dev <dev>`)
  --bind-dev <dev>          bind to the network interface with SO_BINDTODEVICE
  -V, --verbose             more detailed output
  -J, --json                output in JSON format
  --logfile f               send output to a log file
  --forceflush              force flushing output at every interval
  --timestamps<=format>     emit a timestamp at the start of each output line
                            (optional "=" and format string as per strftime(3))
  --rcv-timeout #           idle timeout for receiving data (default 120000 ms)
  --snd-timeout #           timeout for unacknowledged TCP data
                            (in ms, default is system settings)
  -d, --debug[=#]           emit debugging output
                            (optional optional "=" and debug level: 1-4. Default is 4 - all messages)
  -v, --version             show version information and quit
  -h, --help                show this message and quit
Server specific:
  -s, --server              run in server mode
  -D, --daemon              run the server as a daemon
  -1, --one-off             handle one client connection then exit
  --server-bitrate-limit #[KMG][/#]   server's total bit rate limit (default 0 = no limit)
                            (optional slash and number of secs interval for averaging
                            total data rate.  Default is 5 seconds)
  --idle-timeout #          restart idle server after # seconds in case it
                            got stuck (default - no timeout)
  --rsa-private-key-path    path to the RSA private key used to decrypt
                            authentication credentials
  --authorized-users-path   path to the configuration file containing user
                            credentials
  --time-skew-threshold     time skew threshold (in seconds) between the server
                            and client during the authentication process
Client specific:
  -c, --client <host>[%<dev>] run in client mode, connecting to <host>
                              (option <dev> equivalent to `--bind-dev <dev>`)
  -u, --udp                 use UDP rather than TCP
  --connect-timeout #       timeout for control connection setup (ms)
  -b, --bitrate #[KMG][/#]  target bitrate in bits/sec (0 for unlimited)
                            (default 1 Mbit/sec for UDP, unlimited for TCP)
                            (optional slash and packet count for burst mode)
  --pacing-timer #[KMG]     set the timing for pacing, in microseconds (default 1000)
  --fq-rate #[KMG]          enable fair-queuing based socket pacing in
                            bits/sec (Linux only)
  -t, --time      #         time in seconds to transmit for (default 10 secs)
  -n, --bytes     #[KMG]    number of bytes to transmit (instead of -t)
  -k, --blockcount #[KMG]   number of blocks (packets) to transmit (instead of -t or -n)
  -l, --length    #[KMG]    length of buffer to read or write
                            (default 128 KB for TCP, dynamic or 1460 for UDP)
  --cport         <port>    bind to a specific client port (TCP and UDP, default: ephemeral port)
  -P, --parallel  #         number of parallel client streams to run
  -R, --reverse             run in reverse mode (server sends, client receives)
  --bidir                   run in bidirectional mode.
                            Client and server send and receive data.
  -w, --window    #[KMG]    set send/receive socket buffer sizes
                            (indirectly sets TCP window size)
  -C, --congestion <algo>   set TCP congestion control algorithm (Linux and FreeBSD only)
  -M, --set-mss   #         set TCP/SCTP maximum segment size (MTU - 40 bytes)
  -N, --no-delay            set TCP/SCTP no delay, disabling Nagle's Algorithm
  -4, --version4            only use IPv4
  -6, --version6            only use IPv6
  -S, --tos N               set the IP type of service, 0-255.
                            The usual prefixes for octal and hex can be used,
                            i.e. 52, 064 and 0x34 all specify the same value.
  --dscp N or --dscp val    set the IP dscp value, either 0-63 or symbolic.
                            Numeric values can be specified in decimal,
                            octal and hex (see --tos above).
  -L, --flowlabel N         set the IPv6 flow label (only supported on Linux)
  -Z, --zerocopy            use a 'zero copy' method of sending data
  -O, --omit N              perform pre-test for N seconds and omit the pre-test statistics
  -T, --title str           prefix every output line with this string
  --extra-data str          data string to include in client and server JSON
  --get-server-output       get results from server
  --udp-counters-64bit      use 64-bit counters in UDP test packets
  --repeating-payload       use repeating pattern in payload, instead of
                            randomized payload (like in iperf2)
  --dont-fragment           set IPv4 Don't Fragment flag
  --username                username for authentication
  --rsa-public-key-path     path to the RSA public key used to encrypt
                            authentication credentials

[KMG] indicates options that support a K/M/G suffix for kilo-, mega-, or giga-

iperf3 homepage at: https://software.es.net/iperf/
Report bugs to:     https://github.com/esnet/iperf
+ ./src/iperf3 -c Picow27 -P 3 -t 5
iperf3: error - unable to connect to server: Connection refused
+ ./src/iperf3 -c Picow27 -u -P 3 -t 5
iperf3: error - unable to connect to server: Connection refused
+ ./src/iperf3 -c Picow27 -P 2 -t 5 -R
iperf3: error - unable to connect to server: Connection refused
+ ./src/iperf3 -c Picow27 -u -P 2 -t 5 -R
iperf3: error - unable to connect to server: Connection refused
+ ./src/iperf3 -c Picow27 -P 2 -t 5 --bidir
iperf3: error - unable to connect to server: Connection refused
+ ./src/iperf3 -c Picow27 -u -P 2 -t 5 --bidir
iperf3: error - unable to connect to server: Connection refused
+ ./src/iperf3 -c Picow27 -Z -t 5
iperf3: error - unable to connect to server: Connection refused
+ ./src/iperf3 -c Picow27 -Z -t 5 -R
iperf3: error - unable to connect to server: Connection refused
+ ./src/iperf3 -c Picow27 -t 5 -w 8M
iperf3: error - unable to connect to server: Connection refused
+ ./src/iperf3 -c Picow27 -n 5M
iperf3: error - unable to connect to server: Connection refused
+ ./src/iperf3 -c Picow27 -n 5M -u -b1G
iperf3: error - unable to connect to server: Connection refused
+ ./src/iperf3 -c Picow27 -n 5M -R
iperf3: error - unable to connect to server: Connection refused
+ ./src/iperf3 -c Picow27 -n 5M -u -b1G -R
iperf3: error - unable to connect to server: Connection refused
+ ./src/iperf3 -c Picow27 -n 5M -t 5
iperf3: parameter error - only one test end condition (-t, -n, -k) may be specified

Usage: iperf3 [-s|-c host] [options]
       iperf3 [-h|--help] [-v|--version]

Server or Client:
  -p, --port      #         server port to listen on/connect to
  -f, --format   [kmgtKMGT] format to report: Kbits, Mbits, Gbits, Tbits
  -i, --interval  #         seconds between periodic throughput reports
  -I, --pidfile file        write PID file
  -F, --file name           xmit/recv the specified file
  -A, --affinity n/n,m      set CPU affinity
  -B, --bind <host>[%<dev>] bind to the interface associated with the address <host>
                            (optional <dev> equivalent to `--bind-dev <dev>`)
  --bind-dev <dev>          bind to the network interface with SO_BINDTODEVICE
  -V, --verbose             more detailed output
  -J, --json                output in JSON format
  --logfile f               send output to a log file
  --forceflush              force flushing output at every interval
  --timestamps<=format>     emit a timestamp at the start of each output line
                            (optional "=" and format string as per strftime(3))
  --rcv-timeout #           idle timeout for receiving data (default 120000 ms)
  --snd-timeout #           timeout for unacknowledged TCP data
                            (in ms, default is system settings)
  -d, --debug[=#]           emit debugging output
                            (optional optional "=" and debug level: 1-4. Default is 4 - all messages)
  -v, --version             show version information and quit
  -h, --help                show this message and quit
Server specific:
  -s, --server              run in server mode
  -D, --daemon              run the server as a daemon
  -1, --one-off             handle one client connection then exit
  --server-bitrate-limit #[KMG][/#]   server's total bit rate limit (default 0 = no limit)
                            (optional slash and number of secs interval for averaging
                            total data rate.  Default is 5 seconds)
  --idle-timeout #          restart idle server after # seconds in case it
                            got stuck (default - no timeout)
  --rsa-private-key-path    path to the RSA private key used to decrypt
                            authentication credentials
  --authorized-users-path   path to the configuration file containing user
                            credentials
  --time-skew-threshold     time skew threshold (in seconds) between the server
                            and client during the authentication process
Client specific:
  -c, --client <host>[%<dev>] run in client mode, connecting to <host>
                              (option <dev> equivalent to `--bind-dev <dev>`)
  -u, --udp                 use UDP rather than TCP
  --connect-timeout #       timeout for control connection setup (ms)
  -b, --bitrate #[KMG][/#]  target bitrate in bits/sec (0 for unlimited)
                            (default 1 Mbit/sec for UDP, unlimited for TCP)
                            (optional slash and packet count for burst mode)
  --pacing-timer #[KMG]     set the timing for pacing, in microseconds (default 1000)
  --fq-rate #[KMG]          enable fair-queuing based socket pacing in
                            bits/sec (Linux only)
  -t, --time      #         time in seconds to transmit for (default 10 secs)
  -n, --bytes     #[KMG]    number of bytes to transmit (instead of -t)
  -k, --blockcount #[KMG]   number of blocks (packets) to transmit (instead of -t or -n)
  -l, --length    #[KMG]    length of buffer to read or write
                            (default 128 KB for TCP, dynamic or 1460 for UDP)
  --cport         <port>    bind to a specific client port (TCP and UDP, default: ephemeral port)
  -P, --parallel  #         number of parallel client streams to run
  -R, --reverse             run in reverse mode (server sends, client receives)
  --bidir                   run in bidirectional mode.
                            Client and server send and receive data.
  -w, --window    #[KMG]    set send/receive socket buffer sizes
                            (indirectly sets TCP window size)
  -C, --congestion <algo>   set TCP congestion control algorithm (Linux and FreeBSD only)
  -M, --set-mss   #         set TCP/SCTP maximum segment size (MTU - 40 bytes)
  -N, --no-delay            set TCP/SCTP no delay, disabling Nagle's Algorithm
  -4, --version4            only use IPv4
  -6, --version6            only use IPv6
  -S, --tos N               set the IP type of service, 0-255.
                            The usual prefixes for octal and hex can be used,
                            i.e. 52, 064 and 0x34 all specify the same value.
  --dscp N or --dscp val    set the IP dscp value, either 0-63 or symbolic.
                            Numeric values can be specified in decimal,
                            octal and hex (see --tos above).
  -L, --flowlabel N         set the IPv6 flow label (only supported on Linux)
  -Z, --zerocopy            use a 'zero copy' method of sending data
  -O, --omit N              perform pre-test for N seconds and omit the pre-test statistics
  -T, --title str           prefix every output line with this string
  --extra-data str          data string to include in client and server JSON
  --get-server-output       get results from server
  --udp-counters-64bit      use 64-bit counters in UDP test packets
  --repeating-payload       use repeating pattern in payload, instead of
                            randomized payload (like in iperf2)
  --dont-fragment           set IPv4 Don't Fragment flag
  --username                username for authentication
  --rsa-public-key-path     path to the RSA public key used to encrypt
                            authentication credentials

[KMG] indicates options that support a K/M/G suffix for kilo-, mega-, or giga-

iperf3 homepage at: https://software.es.net/iperf/
Report bugs to:     https://github.com/esnet/iperf
+ ./src/iperf3 -c Picow27 -k 1K
iperf3: error - unable to connect to server: Connection refused
+ ./src/iperf3 -c Picow27 -k 1K -u -b1G
iperf3: error - unable to connect to server: Connection refused
+ ./src/iperf3 -c Picow27 -k 1K -R
iperf3: error - unable to connect to server: Connection refused
+ ./src/iperf3 -c Picow27 -k 1K -u -b1G -R
iperf3: error - unable to connect to server: Connection refused
+ ./src/iperf3 -c Picow27 -A 2/2
iperf3: error - unable to connect to server: Connection refused
+ ./src/iperf3 -c Picow27 -A 2/2 -u -b1G
iperf3: error - unable to connect to server: Connection refused
+ ./src/iperf3 -c Picow27 -u -b1G/100
iperf3: error - unable to connect to server: Connection refused
+ ./src/iperf3 -c Picow27 -M 1000 -V
iperf 3.11
Linux pi4-27 5.15.32-v7l+ #1538 SMP Thu Mar 31 19:39:41 BST 2022 armv7l
iperf3: error - unable to connect to server: Connection refused
+ ./src/iperf3 -c Picow27 -C reno -V
iperf 3.11
Linux pi4-27 5.15.32-v7l+ #1538 SMP Thu Mar 31 19:39:41 BST 2022 armv7l
iperf3: error - unable to connect to server: Connection refused

I tested between two RPi4 
/src/iperf3  -s the server
./test_commands.sh RPi1 the client
